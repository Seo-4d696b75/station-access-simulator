import * as types from '../';
import { ReadonlyState } from '../core/state';

import { createCopyFunc, createMergeFunc } from './helper';
import * as schema from './schema';
/*
 * This file is auto-generated by ./generate.ts
 * Reading schemes and custom functions exported in ./schema.ts,
 * the generator defines copy & merge functions for each type.
 * Unlink cloneDeep and merge function provided by lodash,
 * these functions ONLY copy or merge properties defined in each type declaration.
 * But not much as powerful as lodash, so only plane object supported.
 * 
 * The generator searches ./schema.ts for
 * variable named '${name}Schema', where its type must be ObjectSchema<$name>,
 * then generates copy & merge functions
 */

// auto generated copy functions from schema and custom function exported in ./schema.ts
export namespace copy {
  // from schema
  export const Line: (src: ReadonlyState<types.Line>) => types.Line = createCopyFunc(schema.lineSchema)
  export const Station: (src: ReadonlyState<types.Station>) => types.Station = createCopyFunc(schema.stationSchema)
  export const StationLink: (src: ReadonlyState<types.StationLink>) => types.StationLink = createCopyFunc(schema.stationLinkSchema)
  export const FilmHolder: (src: ReadonlyState<types.FilmHolder>) => types.FilmHolder = createCopyFunc(schema.filmHolderSchema)
  export const SkillHolder: (src: ReadonlyState<types.SkillHolder>) => types.SkillHolder = createCopyFunc(schema.skillHolderSchema)
  export const Denco: (src: ReadonlyState<types.Denco>) => types.Denco = createCopyFunc(schema.dencoSchema)
  export const DencoState: (src: ReadonlyState<types.DencoState>) => types.DencoState = createCopyFunc(schema.dencoStateSchema)
  export const UserProperty: (src: ReadonlyState<types.UserProperty>) => types.UserProperty = createCopyFunc(schema.userPropertySchema)
  export const AccessDencoState: (src: ReadonlyState<types.AccessDencoState>) => types.AccessDencoState = createCopyFunc(schema.accessDencoStateSchema)
  export const AccessSideState: (src: ReadonlyState<types.AccessSideState>) => types.AccessSideState = createCopyFunc(schema.accessSideStateSchema)
  export const AccessState: (src: ReadonlyState<types.AccessState>) => types.AccessState = createCopyFunc(schema.accessStateSchema)
  export const LinkResult: (src: ReadonlyState<types.LinkResult>) => types.LinkResult = createCopyFunc(schema.linkResultSchema)
  export const LinksResult: (src: ReadonlyState<types.LinksResult>) => types.LinksResult = createCopyFunc(schema.linksResultSchema)
  export const AccessDencoResult: (src: ReadonlyState<types.AccessDencoResult>) => types.AccessDencoResult = createCopyFunc(schema.accessDencoResultSchema)
  export const AccessEventData: (src: ReadonlyState<types.AccessEventData>) => types.AccessEventData = createCopyFunc(schema.accessEventDataSchema)
  export const Event: (src: ReadonlyState<types.Event>) => types.Event = createCopyFunc(schema.eventSchema)
  export const EventQueueEntry: (src: ReadonlyState<types.EventQueueEntry>) => types.EventQueueEntry = createCopyFunc(schema.eventQueueEntrySchema)
  export const UserState: (src: ReadonlyState<types.UserState>) => types.UserState = createCopyFunc(schema.userStateSchema)
  export const AccessUserResult: (src: ReadonlyState<types.AccessUserResult>) => types.AccessUserResult = createCopyFunc(schema.accessUserResultSchema)
  export const AccessResult: (src: ReadonlyState<types.AccessResult>) => types.AccessResult = createCopyFunc(schema.accessResultSchema)
  export const SkillEventDencoState: (src: ReadonlyState<types.SkillEventDencoState>) => types.SkillEventDencoState = createCopyFunc(schema.skillEventDencoStateSchema)
  export const SkillEventState: (src: ReadonlyState<types.SkillEventState>) => types.SkillEventState = createCopyFunc(schema.skillEventStateSchema)
}

// auto generated merge functions from schema and custom function exported in ./schema.ts
export namespace merge {
  // from schema
  export const Line: (dst: types.Line, src: ReadonlyState<types.Line>) => void = createMergeFunc(schema.lineSchema)
  export const Station: (dst: types.Station, src: ReadonlyState<types.Station>) => void = createMergeFunc(schema.stationSchema)
  export const StationLink: (dst: types.StationLink, src: ReadonlyState<types.StationLink>) => void = createMergeFunc(schema.stationLinkSchema)
  export const FilmHolder: (dst: types.FilmHolder, src: ReadonlyState<types.FilmHolder>) => void = createMergeFunc(schema.filmHolderSchema)
  export const SkillHolder: (dst: types.SkillHolder, src: ReadonlyState<types.SkillHolder>) => void = createMergeFunc(schema.skillHolderSchema)
  export const Denco: (dst: types.Denco, src: ReadonlyState<types.Denco>) => void = createMergeFunc(schema.dencoSchema)
  export const DencoState: (dst: types.DencoState, src: ReadonlyState<types.DencoState>) => void = createMergeFunc(schema.dencoStateSchema)
  export const UserProperty: (dst: types.UserProperty, src: ReadonlyState<types.UserProperty>) => void = createMergeFunc(schema.userPropertySchema)
  export const AccessDencoState: (dst: types.AccessDencoState, src: ReadonlyState<types.AccessDencoState>) => void = createMergeFunc(schema.accessDencoStateSchema)
  export const AccessSideState: (dst: types.AccessSideState, src: ReadonlyState<types.AccessSideState>) => void = createMergeFunc(schema.accessSideStateSchema)
  export const AccessState: (dst: types.AccessState, src: ReadonlyState<types.AccessState>) => void = createMergeFunc(schema.accessStateSchema)
  export const LinkResult: (dst: types.LinkResult, src: ReadonlyState<types.LinkResult>) => void = createMergeFunc(schema.linkResultSchema)
  export const LinksResult: (dst: types.LinksResult, src: ReadonlyState<types.LinksResult>) => void = createMergeFunc(schema.linksResultSchema)
  export const AccessDencoResult: (dst: types.AccessDencoResult, src: ReadonlyState<types.AccessDencoResult>) => void = createMergeFunc(schema.accessDencoResultSchema)
  export const AccessEventData: (dst: types.AccessEventData, src: ReadonlyState<types.AccessEventData>) => void = createMergeFunc(schema.accessEventDataSchema)
  export const Event: (dst: types.Event, src: ReadonlyState<types.Event>) => void = createMergeFunc(schema.eventSchema)
  export const EventQueueEntry: (dst: types.EventQueueEntry, src: ReadonlyState<types.EventQueueEntry>) => void = createMergeFunc(schema.eventQueueEntrySchema)
  export const UserState: (dst: types.UserState, src: ReadonlyState<types.UserState>) => void = createMergeFunc(schema.userStateSchema)
  export const AccessUserResult: (dst: types.AccessUserResult, src: ReadonlyState<types.AccessUserResult>) => void = createMergeFunc(schema.accessUserResultSchema)
  export const AccessResult: (dst: types.AccessResult, src: ReadonlyState<types.AccessResult>) => void = createMergeFunc(schema.accessResultSchema)
  export const SkillEventDencoState: (dst: types.SkillEventDencoState, src: ReadonlyState<types.SkillEventDencoState>) => void = createMergeFunc(schema.skillEventDencoStateSchema)
  export const SkillEventState: (dst: types.SkillEventState, src: ReadonlyState<types.SkillEventState>) => void = createMergeFunc(schema.skillEventStateSchema)
}
